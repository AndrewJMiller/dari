package com.psddev.dari.util;

import java.io.File;
import java.io.IOException;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public abstract class WebPage {

    private WebPageContext context;
    private DebugFilter.PageWriter writer;
    private String path;
    private int statusCode = 200;

    public void initialize(
            ServletContext context,
            HttpServletRequest request,
            HttpServletResponse response,
            String path) throws IOException {

        this.context = new WebPageContext(context, request, response);
        this.writer = new DebugFilter.PageWriter(this.context);
        this.path = path;
    }

    /**
     * Returns the original servlet context.
     *
     * @return Never {@code null}.
     */
    public ServletContext getServletContext() {
        return context.getServletContext();
    }

    /**
     * Returns the original request.
     *
     * @return Never {@code null}.
     */
    public HttpServletRequest getRequest() {
        return context.getRequest();
    }

    /**
     * Returns the original response.
     *
     * @return Never {@code null}.
     */
    public HttpServletResponse getResponse() {
        return context.getResponse();
    }

    public int getStatusCode() {
        return statusCode;
    }

    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }

    public void pass() {
        setStatusCode(0);
        throw Stop.INSTANCE;
    }

    public void notFound() {
        setStatusCode(HttpServletResponse.SC_NOT_FOUND);
        throw Stop.INSTANCE;
    }

    public void error() {
        setStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        throw Stop.INSTANCE;
    }

    /** Returns the request path. */
    public String path() {
        return path;
    }

    public boolean pathToMethod(Object... arguments) {
        if (arguments != null) {
            String path = path();

            for (int i = 0, length = arguments.length; i < length; i += 2) {
                Object pattern = arguments[i];
                Matcher pathMatcher = pathPattern(pattern).matcher(path);
                if (!pathMatcher.matches()) {
                    continue;
                }

                if (i + 1 >= length) {
                    throw new IllegalArgumentException(String.format(
                            "Method for [%s] can't be null!", pattern));
                }

                String methodName = ObjectUtils.to(String.class, arguments[i + 1]);
                if (methodName == null) {
                    throw new IllegalArgumentException(String.format(
                            "Method for [%s] can't be null!", pattern));
                }

                int groupCount = pathMatcher.groupCount();
                for (Method method : getClass().getMethods()) {
                    if (!method.getName().equals(methodName)) {
                        continue;
                    }

                    Type[] parameterTypes = method.getGenericParameterTypes();
                    if (parameterTypes.length != groupCount) {
                        continue;
                    }

                    Object[] methodArguments = new Object[groupCount];
                    for (int j = 0; j < groupCount; ++ j) {
                        methodArguments[j] = ObjectUtils.to(parameterTypes[j], pathMatcher.group(j + 1));
                    }

                    method.setAccessible(true);
                    try {
                        method.invoke(this, methodArguments);
                    } catch (IllegalAccessException ex) {
                        throw new IllegalStateException(ex);
                    } catch (InvocationTargetException ex) {
                        Throwable cause = ex.getCause();
                        throw cause instanceof RuntimeException ?
                                (RuntimeException) cause :
                                new IllegalStateException(ex);
                    }

                    return true;
                }
            }
        }

        return false;
    }

    private Pattern pathPattern(Object pattern) {
        if (pattern == null) {
            throw new IllegalArgumentException("Pattern can't be null!");

        } else if (pattern instanceof Pattern) {
            return (Pattern) pattern;
        }

        String patternString = pattern.toString();
        StringBuilder newPatternBuilder = new StringBuilder();
        int patternStringLength = patternString.length();
        int lastEndAt = 0;

        for (int starAt = 0; (starAt = patternString.indexOf('*', starAt)) > -1; ) {
            newPatternBuilder.append(Pattern.quote(patternString.substring(lastEndAt, starAt)));

            String wildcardPattern = "([^/]*)";
            for (++ starAt; starAt < patternStringLength; ++ starAt) {
                if (patternString.charAt(starAt) != '*') {
                    break;
                } else {
                    wildcardPattern = "(.*)";
                }
            }

            newPatternBuilder.append(wildcardPattern);
            lastEndAt = starAt;
        }

        newPatternBuilder.append(Pattern.quote(patternString.substring(lastEndAt)));
        return Pattern.compile(newPatternBuilder.toString());
    }

    /** Associates the given {@code model} with the given {@code name}. */
    public WebPage model(String name, Object model) {
        context.getRequest().setAttribute(name, model);
        return this;
    }

    /** Renders this web page. */
    public void render() throws Exception {
        if (Settings.isProduction()) {
            pass();
            return;
        }

        String className = WebPage.this.getClass().getName();
        File classSource = CodeUtils.getSource(className);

        writer.startPage("Hello, world!");
            writer.start("p");
                writer.html("Start by editing ");
                if (ObjectUtils.isBlank(classSource)) {
                    writer.start("code");
                        writer.html(className);
                    writer.end();
                } else {
                    writer.start("a",
                            "target", "_blank",
                            "href", DebugFilter.Static.getServletPath(
                                    context.getRequest(), "code",
                                    "file", classSource));
                        writer.start("code");
                            writer.html(className);
                        writer.end();;
                    writer.end();;
                }
                writer.html(" class.");
            writer.end();
        writer.endPage();
    }

    // --- WebPageContext bridge ---

    /** @see WebPageContext#paramNamesList */
    public List<String> paramNamesList() {
        return context.paramNamesList();
    }

    /** @see WebPageContext#paramOrDefault(Type, String, T) */
    public Object paramOrDefault(Type returnType, String name, Object defaultValue) {
        return context.paramOrDefault(returnType, name, defaultValue);
    }

    /** @see WebPageContext#paramOrDefault(Class, String, T) */
    public <T> T paramOrDefault(Class<T> returnClass, String name, T defaultValue) {
        return context.paramOrDefault(returnClass, name, defaultValue);
    }

    /** @see WebPageContext#paramOrDefault(TypeReference, String, T) */
    public <T> T paramOrDefault(TypeReference<T> returnTypeReference, String name, T defaultValue) {
        return context.paramOrDefault(returnTypeReference, name, defaultValue);
    }

    /** @see WebPageContext#param(Type, String) */
    public Object param(Type returnType, String name) {
        return paramOrDefault(returnType, name, null);
    }

    /** @see WebPageContext#param(Class, String) */
    public <T> T param(Class<T> returnClass, String name) {
        return paramOrDefault(returnClass, name, null);
    }

    /** @see WebPageContext#param(TypeReference, String) */
    public <T> T param(TypeReference<T> returnTypeReference, String name) {
        return paramOrDefault(returnTypeReference, name, null);
    }

    /** @see WebPageContext#params(Type, String) */
    public List<Object> params(Type itemType, String name) {
        return context.params(itemType, name);
    }

    /** @see WebPageContext#params(Class, String) */
    public <T> List<T> params(Class<T> itemClass, String name) {
        return context.params(itemClass, name);
    }

    /** @see WebPageContext#params(TypeReference, String) */
    public <T> List<T> params(TypeReference<T> itemTypeReference, String name) {
        return context.params(itemTypeReference, name);
    }

    // --- HtmlWriter bridge ---

    /** @see HtmlWriter#tag */
    public WebPage tag(String tag, Object... attributes) throws IOException {
        writer.tag(tag, attributes);
        return this;
    }

    /** @see HtmlWriter#start */
    public WebPage start(String tag, Object... attributes) throws IOException {
        writer.start(tag, attributes);
        return this;
    }

    /** @see HtmlWriter#end */
    public WebPage end() throws IOException {
        writer.end();
        return this;
    }

    /** @see HtmlWriter#htmlOrDefault */
    public WebPage htmlOrDefault(Object unescapedHtml, String defaultUnescapedHtml) throws IOException {
        writer.htmlOrDefault(unescapedHtml, defaultUnescapedHtml);
        return this;
    }

    /** @see HtmlWriter#html */
    public WebPage html(Object unescapedHtml) throws IOException {
        writer.html(unescapedHtml);
        return this;
    }

    /** @see HtmlWriter#object */
    public WebPage object(Object object) throws IOException {
        writer.object(object);
        return this;
    }

    /** @see HtmlWriter#rawOrDefault */
    public WebPage rawOrDefault(Object object, String defaultString) throws IOException {
        writer.write(ObjectUtils.isBlank(object) ? defaultString : String.valueOf(object));
        return this;
    }

    /** @see HtmlWriter#raw */
    public WebPage raw(Object object) throws IOException {
        rawOrDefault(object, null);
        return this;
    }

    // ---

    @Documented
    @Retention(RetentionPolicy.RUNTIME)
    @Target(ElementType.TYPE)
    public @interface Path {
        String value();
    }

    @SuppressWarnings("serial")
    public static final class Stop extends Error {

        public static final Stop INSTANCE = new Stop();

        private Stop() {
        }
    }
}
